{"version":3,"sources":["components/Button/Button.jsx","components/GridCell/GridCell.jsx","domain/config/constants.js","domain/classes/Grid.js","components/Row/Row.jsx","components/Grid/Grid.jsx","components/TableData/TableData.jsx","components/Table/Table.jsx","components/TextInput/TextInput.jsx","domain/classes/Direction.js","domain/classes/Robot.js","components/RobotMovementBar/RobotMovementBar.jsx","domain/classes/Coordinate.js","domain/classes/Instruction.js","App.js","reportWebVitals.js","index.js"],"names":["Button","label","props","className","GridCell","direction","coordinateText","robot","setActive","onClick","id","toLowerCase","INFO_MESSAGES","ERROR_MESSAGES","grid","this","num_rows","num_columns","max_robots","isValidCoordinate","coordinate","x","y","isGridCellFull","robotArray","filter","length","Row","rowNumber","cellsArray","doesGridCellAlreadyHaveRobot","row","column","robotFound","forEach","columnNumber","push","Grid","rowsArray","i","TableData","headerRowType","data","Fragment","Table","tableData","tableHeadings","headerRowElements","map","tableHeading","index","dataRowElements","tableDataItem","JSON","stringify","active","TextInput","DirectionEnum","Object","freeze","NORTH","EAST","SOUTH","WEST","Robot","RobotMovementBar","activeRobot","displayToast","updateActiveRobot","validateActiveRobotExists","Error","potentialRobotPosition","potentialPosition","calculateRobotForwardPosition","e","message","turnLeft","turnRight","Coordinate","isValidPlaceCommand","PLACE","MOVE","LEFT","RIGHT","REPORT","place","placeArray","split","isNan","potentialCoordinate","toUpperCase","App","useState","setRobotArray","instruction","setInstruction","setActiveRobot","property","value","oldRobotArray","matchingRobotArray","nonMatchingRobotArray","matchingRobot","robotArrayWithUpdatedValues","sort","a","b","icon","toast","error","toastOptions","duration","placeholder","onChange","target","potentialRobot","currentRobotNumber","isMaxRobotsExceeded","instructionArray","isValidInstruction","parseInt","createRobotFromString","prevState","disabled","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3ab0338b.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Button.css';\r\n\r\nfunction Button({ label = 'I am a button', ...props }) {\r\n\treturn (\r\n\t\t<button className=\"\" {...props}>\r\n\t\t\t{label}\r\n\t\t</button>\r\n\t);\r\n}\r\n\r\nexport default Button;\r\n","import React from 'react';\r\nimport './GridCell.css';\r\nimport '../../App.css';\r\nimport { FaRobot } from 'react-icons/fa';\r\n\r\nexport default function GridCell({ coordinateText, robot, setActive }) {\r\n\tconst turnDirectionIntoLowerCase = (direction) => {\r\n\t\treturn direction.toLowerCase();\r\n\t};\r\n\r\n\treturn (\r\n\t\t<span className=\"gridcell\">\r\n\t\t\t{coordinateText}\r\n\t\t\t{robot && (\r\n\t\t\t\t<FaRobot\r\n\t\t\t\t\tonClick={() => setActive(robot.id, 'active', true)}\r\n\t\t\t\t\tclassName={`${turnDirectionIntoLowerCase(\r\n\t\t\t\t\t\trobot.direction\r\n\t\t\t\t\t)} robot robot${robot.id}`}\r\n\t\t\t\t/>\r\n\t\t\t)}\r\n\t\t</span>\r\n\t);\r\n}\r\n","const MAX_ROBOTS = 5;\r\nconst NUM_ROWS = 5;\r\nconst NUM_COLUMNS = 5;\r\n\r\nconst INFO_MESSAGES = {\r\n\tACTIVE_ROBOT_CHANGED: 'The active robot is now robot ',\r\n};\r\n\r\nconst ERROR_MESSAGES = {\r\n\tGRID_CELL_OCCUPIED: 'The proposed grid cell is already occupied',\r\n\tINCORRECT_ARGUMENT: 'The argument passed in appears to be incorrect',\r\n\tINVALID_DIRECTION:\r\n\t\t'DIRECTIONS can only be \"NORTH\", \"SOUTH\", \"EAST\" or \"WEST\"',\r\n\tINVALID_INSTRUCTION:\r\n\t\t'\"PLACE\", \"MOVE\", \"LEFT\", \"RIGHT\", \"REPORT\" are the only valid commands',\r\n\tINVALID_PLACE_COMMAND:\r\n\t\t'PLACE commands should be in the following format \"PLACE 1,2,NORTH\"',\r\n\tMAX_ROBOTS_EXCEEDED: 'You cannot create any more robots',\r\n\tNO_ACTIVE_ROBOT: 'There is no active robot',\r\n\tOUTSIDE_OF_GRID:\r\n\t\t'Instruction would result in the robot being outside of the grid',\r\n};\r\n\r\nexport { ERROR_MESSAGES, INFO_MESSAGES, MAX_ROBOTS, NUM_COLUMNS, NUM_ROWS };\r\n","import {\r\n\tERROR_MESSAGES,\r\n\tMAX_ROBOTS,\r\n\tNUM_ROWS,\r\n\tNUM_COLUMNS,\r\n} from '../config/constants';\r\n\r\nfunction Grid() {\r\n\tthis.num_rows = NUM_ROWS;\r\n\tthis.num_columns = NUM_COLUMNS;\r\n\tthis.max_robots = MAX_ROBOTS;\r\n}\r\n\r\nvar grid = new Grid();\r\n\r\nconst isValidCoordinate = (coordinate) => {\r\n\tif (coordinate.x < 0 || coordinate.y < 0) {\r\n\t\treturn false;\r\n\t}\r\n\r\n\tif (coordinate.x > grid.num_columns - 1 || coordinate.y > grid.num_rows - 1) {\r\n\t\treturn false;\r\n\t}\r\n\treturn true;\r\n};\r\n\r\nconst isMaxRobotsExceeded = (currentRobotNumber) => {\r\n\tif (currentRobotNumber >= grid.max_robots) {\r\n\t\tthrow new Error(ERROR_MESSAGES.MAX_ROBOTS_EXCEEDED);\r\n\t}\r\n\r\n\treturn true;\r\n};\r\n\r\nconst isGridCellFull = (robotArray, coordinate) => {\r\n\tconst matchingRobots = robotArray.filter((robot) => {\r\n\t\treturn (\r\n\t\t\trobot.coordinate.x == coordinate.x && robot.coordinate.y == coordinate.y\r\n\t\t);\r\n\t});\r\n\r\n\treturn matchingRobots.length;\r\n};\r\n\r\nexport { grid, isGridCellFull, isMaxRobotsExceeded, isValidCoordinate };\r\n","import React from 'react';\r\nimport './Row.css';\r\nimport GridCell from '../GridCell/GridCell';\r\nimport { grid } from '../../domain/classes/Grid';\r\n\r\nexport default function Row({ robotArray = [], rowNumber, setActive }) {\r\n\tvar cellsArray = [];\r\n\r\n\tconst doesGridCellAlreadyHaveRobot = (row, column) => {\r\n\t\tlet robotFound = false;\r\n\t\trobotArray.forEach((robot) => {\r\n\t\t\tif (robot.coordinate.x === row && robot.coordinate.y === column) {\r\n\t\t\t\trobotFound = robot;\r\n\t\t\t}\r\n\t\t});\r\n\t\treturn robotFound;\r\n\t};\r\n\r\n\tfor (var columnNumber = 0; columnNumber < grid.num_columns; columnNumber++) {\r\n\t\tcellsArray.push(\r\n\t\t\t<GridCell\r\n\t\t\t\tkey={`${columnNumber}, ${rowNumber}`}\r\n\t\t\t\tcoordinateText={`${columnNumber}, ${rowNumber}`}\r\n\t\t\t\trobot={doesGridCellAlreadyHaveRobot(columnNumber, rowNumber)}\r\n\t\t\t\tsetActive={setActive}\r\n\t\t\t/>\r\n\t\t);\r\n\t}\r\n\r\n\treturn <div className=\"row\">{cellsArray}</div>;\r\n}\r\n","import React from 'react';\r\nimport './Grid.css';\r\nimport Row from '../Row/Row';\r\nimport { grid } from '../../domain/classes/Grid';\r\n\r\nexport default function Grid({ robotArray, setActive }) {\r\n\tvar rowsArray = [];\r\n\tfor (var i = grid.num_rows - 1; i > -1; i--) {\r\n\t\trowsArray.push(\r\n\t\t\t<Row\r\n\t\t\t\tkey={i}\r\n\t\t\t\trowNumber={i}\r\n\t\t\t\trobotArray={robotArray}\r\n\t\t\t\tsetActive={setActive}\r\n\t\t\t/>\r\n\t\t);\r\n\t}\r\n\r\n\treturn <div className=\"grid\">{rowsArray}</div>;\r\n}\r\n","import React from 'react';\r\nimport './TableData.css';\r\n\r\nfunction TableData({ headerRowType = 'false', data }) {\r\n\treturn (\r\n\t\t<React.Fragment>\r\n\t\t\t{headerRowType ? (\r\n\t\t\t\t<th className=\"tableHeader\">{data}</th>\r\n\t\t\t) : (\r\n\t\t\t\t<td className=\"tableData\">{data}</td>\r\n\t\t\t)}\r\n\t\t</React.Fragment>\r\n\t);\r\n}\r\n\r\nexport default TableData;\r\n","import React from 'react';\r\nimport TableData from '../TableData/TableData';\r\nimport './Table.css';\r\nimport { TiTick } from 'react-icons/ti';\r\nimport { FiSquare } from 'react-icons/fi';\r\n\r\nfunction Table({ tableData = [], tableHeadings = [], setActive }) {\r\n\tconst headerRowElements = tableHeadings.map((tableHeading, index) => (\r\n\t\t<TableData key={index} data={tableHeading} headerRowType={true}></TableData>\r\n\t));\r\n\r\n\tconst dataRowElements = tableData.map((tableDataItem, index) => (\r\n\t\t<tr key={index} className={`robot${tableDataItem.id}`}>\r\n\t\t\t<TableData\r\n\t\t\t\tkey={`${tableDataItem.id}-id`}\r\n\t\t\t\tdata={tableDataItem.id}\r\n\t\t\t\theaderRowType={false}\r\n\t\t\t></TableData>\r\n\t\t\t<TableData\r\n\t\t\t\tkey={`${tableDataItem.id}-coordinate`}\r\n\t\t\t\tdata={JSON.stringify(tableDataItem.coordinate)}\r\n\t\t\t\theaderRowType={false}\r\n\t\t\t></TableData>\r\n\t\t\t<TableData\r\n\t\t\t\tkey={`${tableDataItem.id}-direction`}\r\n\t\t\t\tdata={tableDataItem.direction}\r\n\t\t\t\theaderRowType={false}\r\n\t\t\t></TableData>\r\n\t\t\t<TableData\r\n\t\t\t\tkey={`${tableDataItem.id}-active`}\r\n\t\t\t\tdata={\r\n\t\t\t\t\ttableDataItem.active ? (\r\n\t\t\t\t\t\t<TiTick />\r\n\t\t\t\t\t) : (\r\n\t\t\t\t\t\t<FiSquare\r\n\t\t\t\t\t\t\tonClick={() => setActive(tableDataItem.id, 'active', true)}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t)\r\n\t\t\t\t}\r\n\t\t\t\theaderRowType={false}\r\n\t\t\t></TableData>\r\n\t\t</tr>\r\n\t));\r\n\r\n\treturn (\r\n\t\t<table className=\"table\">\r\n\t\t\t<thead>\r\n\t\t\t\t<tr>{headerRowElements}</tr>\r\n\t\t\t</thead>\r\n\r\n\t\t\t<tbody className=\"table\">{dataRowElements}</tbody>\r\n\t\t</table>\r\n\t);\r\n}\r\n\r\nexport default Table;\r\n","import React from 'react';\r\n\r\nfunction TextInput({ ...props }) {\r\n\treturn (\r\n\t\t<span className=\"\">\r\n\t\t\t<input {...props} />\r\n\t\t</span>\r\n\t);\r\n}\r\n\r\nexport default TextInput;\r\n","const DirectionEnum = Object.freeze({\r\n\tNORTH: 'NORTH',\r\n\tEAST: 'EAST',\r\n\tSOUTH: 'SOUTH',\r\n\tWEST: 'WEST',\r\n});\r\n\r\nconst turnLeft = (robot) => {\r\n\tif (!robot) {\r\n\t\tthrow new Error('Current robot is not defined');\r\n\t}\r\n\r\n\tswitch (robot.direction) {\r\n\t\tcase DirectionEnum.NORTH:\r\n\t\t\trobot.direction = DirectionEnum.WEST;\r\n\t\t\tbreak;\r\n\t\tcase DirectionEnum.EAST:\r\n\t\t\trobot.direction = DirectionEnum.NORTH;\r\n\t\t\tbreak;\r\n\t\tcase DirectionEnum.SOUTH:\r\n\t\t\trobot.direction = DirectionEnum.EAST;\r\n\t\t\tbreak;\r\n\r\n\t\tcase DirectionEnum.WEST:\r\n\t\t\trobot.direction = DirectionEnum.SOUTH;\r\n\t\t\tbreak;\r\n\r\n\t\tdefault:\r\n\t\t\tthrow new Error('Active robot direction is not defined');\r\n\t}\r\n};\r\n\r\nconst turnRight = (robot) => {\r\n\tif (!robot) {\r\n\t\tthrow new Error('Current robot is not defined');\r\n\t}\r\n\r\n\tswitch (robot.direction) {\r\n\t\tcase DirectionEnum.NORTH:\r\n\t\t\trobot.direction = DirectionEnum.EAST;\r\n\t\t\tbreak;\r\n\t\tcase DirectionEnum.EAST:\r\n\t\t\trobot.direction = DirectionEnum.SOUTH;\r\n\t\t\tbreak;\r\n\t\tcase DirectionEnum.SOUTH:\r\n\t\t\trobot.direction = DirectionEnum.WEST;\r\n\t\t\tbreak;\r\n\t\tcase DirectionEnum.WEST:\r\n\t\t\trobot.direction = DirectionEnum.NORTH;\r\n\t\t\tbreak;\r\n\t\tdefault:\r\n\t\t\tthrow new Error('Current direction is not defined');\r\n\t}\r\n};\r\n\r\nexport { DirectionEnum, turnRight, turnLeft };\r\n","import { DirectionEnum } from './Direction';\r\nimport { isValidCoordinate } from './Grid';\r\nimport { ERROR_MESSAGES } from '../config/constants';\r\n\r\nfunction Robot(id, coordinate, direction, active) {\r\n\tthis.id = id;\r\n\tthis.coordinate = coordinate;\r\n\tthis.direction = direction;\r\n\tthis.active = active;\r\n}\r\n\r\nconst calculateRobotForwardPosition = (robot) => {\r\n\tif (!robot) {\r\n\t\tthrow new Error(ERROR_MESSAGES.NO_ACTIVE_ROBOT);\r\n\t}\r\n\tif (!robot.direction) {\r\n\t\tthrow new Error(ERROR_MESSAGES.NO_ACTIVE_ROBOT);\r\n\t}\r\n\r\n\tlet potentialPosition = { ...robot.coordinate };\r\n\r\n\tswitch (robot.direction) {\r\n\t\tcase DirectionEnum.NORTH:\r\n\t\t\tpotentialPosition.y++;\r\n\t\t\tbreak;\r\n\t\tcase DirectionEnum.EAST:\r\n\t\t\tpotentialPosition.x++;\r\n\t\t\tbreak;\r\n\t\tcase DirectionEnum.SOUTH:\r\n\t\t\tpotentialPosition.y--;\r\n\t\t\tbreak;\r\n\t\tcase DirectionEnum.WEST:\r\n\t\t\tpotentialPosition.x--;\r\n\t\t\tbreak;\r\n\t\tdefault:\r\n\t\t\tthrow new Error(ERROR_MESSAGES.INVALID_DIRECTION);\r\n\t}\r\n\r\n\tif (!isValidCoordinate(potentialPosition)) {\r\n\t\tthrow new Error(ERROR_MESSAGES.OUTSIDE_OF_GRID);\r\n\t}\r\n\r\n\treturn potentialPosition;\r\n};\r\n\r\nexport { calculateRobotForwardPosition, Robot };\r\n","import React from 'react';\r\nimport './RobotMovementBar.css';\r\nimport Button from '../Button/Button';\r\nimport { calculateRobotForwardPosition } from '../../domain/classes/Robot';\r\nimport { turnLeft, turnRight } from '../../domain/classes/Direction';\r\nimport { ERROR_MESSAGES } from '../../domain/config/constants';\r\nimport { isGridCellFull } from '../../domain/classes/Grid';\r\n\r\nfunction RobotMovementBar({\r\n\tactiveRobot,\r\n\tdisplayToast,\r\n\tupdateActiveRobot,\r\n\trobotArray,\r\n}) {\r\n\tconst validateActiveRobotExists = () => {\r\n\t\tif (!activeRobot) {\r\n\t\t\tthrow new Error(ERROR_MESSAGES.NO_ACTIVE_ROBOT);\r\n\t\t}\r\n\t\treturn true;\r\n\t};\r\n\r\n\tconst moveRobot = () => {\r\n\t\ttry {\r\n\t\t\tvalidateActiveRobotExists();\r\n\t\t\tconst potentialRobotPosition = calculateRobotForwardPosition(activeRobot);\r\n\r\n\t\t\tif (isGridCellFull(robotArray, potentialRobotPosition)) {\r\n\t\t\t\tthrow new Error(ERROR_MESSAGES.GRID_CELL_OCCUPIED);\r\n\t\t\t}\r\n\r\n\t\t\tactiveRobot.coordinate = potentialRobotPosition;\r\n\r\n\t\t\tupdateActiveRobot(activeRobot.id, 'coordinate', activeRobot.coordinate);\r\n\t\t} catch (e) {\r\n\t\t\tdisplayToast(e.message);\r\n\t\t}\r\n\t};\r\n\r\n\tconst turnRobotLeft = () => {\r\n\t\ttry {\r\n\t\t\tvalidateActiveRobotExists();\r\n\t\t\tturnLeft(activeRobot);\r\n\t\t\tupdateActiveRobot(activeRobot.id, 'direction', activeRobot.direction);\r\n\t\t} catch (e) {\r\n\t\t\tdisplayToast(e.message);\r\n\t\t}\r\n\t};\r\n\r\n\tconst turnRobotRight = () => {\r\n\t\ttry {\r\n\t\t\tvalidateActiveRobotExists();\r\n\t\t\tturnRight(activeRobot);\r\n\t\t\tupdateActiveRobot(activeRobot.id, 'direction', activeRobot.direction);\r\n\t\t} catch (e) {\r\n\t\t\tdisplayToast(e.message);\r\n\t\t}\r\n\t};\r\n\r\n\treturn (\r\n\t\t<div className=\"robotMovementBar\">\r\n\t\t\t<h2>Active Robot Commands</h2>\r\n\t\t\t<Button label=\"Move Robot Forward\" onClick={moveRobot} />\r\n\t\t\t<Button label=\"Turn Robot Left\" onClick={turnRobotLeft} />\r\n\t\t\t<Button label=\"Turn Robot Right\" onClick={turnRobotRight} />\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default RobotMovementBar;\r\n","function Coordinate(x, y) {\r\n\tthis.x = x;\r\n\tthis.y = y;\r\n}\r\n\r\nexport default Coordinate;\r\n","import { DirectionEnum } from './Direction';\r\nimport { ERROR_MESSAGES } from '../config/constants';\r\nimport { Robot } from './Robot';\r\nimport Coordinate from './Coordinate';\r\nimport { isGridCellFull, isValidCoordinate } from './Grid';\r\n\r\nconst InstructionEnum = Object.freeze({\r\n\tPLACE: 1,\r\n\tMOVE: 2,\r\n\tLEFT: 3,\r\n\tRIGHT: 4,\r\n\tREPORT: 5,\r\n});\r\n\r\n//PLACE 1,2,NORTH\r\nconst isValidInstruction = (instruction, robotArray) => {\r\n\tif (!instruction || typeof instruction !== 'string') {\r\n\t\tthrow new Error(ERROR_MESSAGES.INCORRECT_ARGUMENT);\r\n\t}\r\n\r\n\tconst instructionArray = instruction.split(' ');\r\n\r\n\tif (instructionArray.length > 2) {\r\n\t\tthrow new Error(ERROR_MESSAGES.INVALID_INSTRUCTION);\r\n\t}\r\n\r\n\tif (\r\n\t\tinstructionArray.length !== 2 ||\r\n\t\tinstructionArray[0].toUpperCase() !== 'PLACE'\r\n\t) {\r\n\t\tthrow new Error(ERROR_MESSAGES.INVALID_PLACE_COMMAND);\r\n\t}\r\n\r\n\tif (!isValidPlaceCommand(instructionArray[1], robotArray)) {\r\n\t\treturn false;\r\n\t}\r\n\r\n\treturn true;\r\n};\r\n\r\nconst isValidPlaceCommand = (place, robotArray) => {\r\n\tconst placeArray = place.split(',');\r\n\r\n\tif (placeArray.length !== 3) {\r\n\t\tthrow new Error(ERROR_MESSAGES.INVALID_PLACE_COMMAND);\r\n\t}\r\n\r\n\tif (placeArray[0].isNan || placeArray[1].isNan) {\r\n\t\tthrow new Error(ERROR_MESSAGES.INVALID_PLACE_COMMAND);\r\n\t}\r\n\r\n\tconst potentialCoordinate = new Coordinate(placeArray[0], placeArray[1]);\r\n\r\n\tif (!isValidCoordinate(potentialCoordinate)) {\r\n\t\tthrow new Error(ERROR_MESSAGES.OUTSIDE_OF_GRID);\r\n\t}\r\n\r\n\tif (isGridCellFull(robotArray, potentialCoordinate)) {\r\n\t\tthrow new Error(ERROR_MESSAGES.GRID_CELL_OCCUPIED);\r\n\t}\r\n\r\n\tif (!(placeArray[2].toUpperCase() in DirectionEnum)) {\r\n\t\tthrow new Error(ERROR_MESSAGES.INVALID_PLACE_COMMAND);\r\n\t}\r\n\r\n\treturn true;\r\n};\r\n\r\nconst createRobotFromString = (instruction, id, active) => {\r\n\tconst instructionArray = instruction.split(' ');\r\n\tinstruction.split(' ');\r\n\r\n\tconst placeArray = instructionArray[1].split(',');\r\n\r\n\treturn new Robot(\r\n\t\tid,\r\n\t\tnew Coordinate(parseInt(placeArray[0]), parseInt(placeArray[1])),\r\n\t\tplaceArray[2].toUpperCase(),\r\n\t\tactive\r\n\t);\r\n};\r\n\r\nexport { InstructionEnum, isValidInstruction, createRobotFromString };\r\n","import './App.css';\r\nimport React, { useState } from 'react';\r\nimport Button from './components/Button/Button';\r\nimport Grid from './components/Grid/Grid';\r\nimport Table from './components/Table/Table';\r\nimport TextInput from './components/TextInput/TextInput';\r\nimport RobotMovementBar from './components/RobotMovementBar/RobotMovementBar';\r\nimport {\r\n\tisValidInstruction,\r\n\tcreateRobotFromString,\r\n} from './domain/classes/Instruction';\r\nimport { isMaxRobotsExceeded } from './domain/classes/Grid';\r\nimport { toast, Toaster } from 'react-hot-toast';\r\nimport { INFO_MESSAGES } from './domain/config/constants';\r\n\r\nfunction App() {\r\n\tconst [robotArray, setRobotArray] = useState([]);\r\n\tconst [instruction, setInstruction] = useState('');\r\n\tconst [activeRobot, setActiveRobot] = useState('');\r\n\r\n\tconst addRobot = () => {\r\n\t\tlet potentialRobot;\r\n\t\ttry {\r\n\t\t\tisMaxRobotsExceeded(robotArray.length);\r\n\t\t\tisValidInstruction(instruction, robotArray);\r\n\t\t\tpotentialRobot = createRobotFromString(\r\n\t\t\t\tinstruction,\r\n\t\t\t\trobotArray.length + 1,\r\n\t\t\t\t!activeRobot\r\n\t\t\t);\r\n\r\n\t\t\tsetRobotArray((prevState) => [...prevState, potentialRobot]);\r\n\t\t\tsetInstruction('');\r\n\t\t} catch (e) {\r\n\t\t\tdisplayToast(e.message);\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t!activeRobot && setActiveRobot(potentialRobot);\r\n\t};\r\n\r\n\tconst updateActiveRobot = (id, property, value) => {\r\n\t\ttry {\r\n\t\t\tconst oldRobotArray = [...robotArray];\r\n\r\n\t\t\tconst matchingRobotArray = oldRobotArray.filter((robot) => {\r\n\t\t\t\treturn robot.id === id;\r\n\t\t\t});\r\n\r\n\t\t\tconst nonMatchingRobotArray = oldRobotArray.filter((robot) => {\r\n\t\t\t\treturn robot.id !== id;\r\n\t\t\t});\r\n\r\n\t\t\tif (property === 'active') {\r\n\t\t\t\tnonMatchingRobotArray.forEach((robot) => {\r\n\t\t\t\t\trobot.active = false;\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\tconst matchingRobot = { ...matchingRobotArray[0] };\r\n\t\t\tmatchingRobot[property] = value;\r\n\r\n\t\t\tconst robotArrayWithUpdatedValues = [\r\n\t\t\t\t...nonMatchingRobotArray,\r\n\t\t\t\tmatchingRobot,\r\n\t\t\t];\r\n\r\n\t\t\trobotArrayWithUpdatedValues.sort((a, b) => a.id - b.id);\r\n\r\n\t\t\tsetRobotArray(robotArrayWithUpdatedValues);\r\n\r\n\t\t\tif (property === 'active' && activeRobot.id !== id) {\r\n\t\t\t\tdisplayToast(INFO_MESSAGES.ACTIVE_ROBOT_CHANGED + id, '✔️');\r\n\t\t\t}\r\n\t\t\tsetActiveRobot(matchingRobot);\r\n\t\t} catch (e) {\r\n\t\t\tdisplayToast(e.message);\r\n\t\t\treturn;\r\n\t\t}\r\n\t};\r\n\r\n\tconst handleInstructionTerm = (e) => {\r\n\t\tsetInstruction(e.target.value);\r\n\t};\r\n\r\n\tconst displayToast = (message, icon = '⚠️') => {\r\n\t\ttoast.error(message, {\r\n\t\t\ticon: icon,\r\n\t\t});\r\n\t};\r\n\r\n\treturn (\r\n\t\t<div className=\"app\">\r\n\t\t\t<div>\r\n\t\t\t\t<Toaster\r\n\t\t\t\t\ttoastOptions={{\r\n\t\t\t\t\t\tduration: 2000,\r\n\t\t\t\t\t}}\r\n\t\t\t\t/>\r\n\t\t\t</div>\r\n\t\t\t<h1>Robot</h1>\r\n\r\n\t\t\t<Table\r\n\t\t\t\ttableHeadings={['ID', 'Coordinate', 'Direction', 'Active']}\r\n\t\t\t\ttableData={robotArray}\r\n\t\t\t\tsetActive={updateActiveRobot}\r\n\t\t\t/>\r\n\r\n\t\t\t<TextInput\r\n\t\t\t\tplaceholder=\"Enter Starting Instructions\"\r\n\t\t\t\tonChange={handleInstructionTerm}\r\n\t\t\t\tvalue={instruction}\r\n\t\t\t/>\r\n\t\t\t<Button\r\n\t\t\t\tlabel=\"Create New Robot\"\r\n\t\t\t\tonClick={addRobot}\r\n\t\t\t\tdisabled={!instruction}\r\n\t\t\t/>\r\n\r\n\t\t\t<RobotMovementBar\r\n\t\t\t\tactiveRobot={activeRobot}\r\n\t\t\t\tdisplayToast={displayToast}\r\n\t\t\t\tupdateActiveRobot={updateActiveRobot}\r\n\t\t\t\trobotArray={robotArray}\r\n\t\t\t/>\r\n\t\t\t<Grid robotArray={robotArray} setActive={updateActiveRobot} />\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}