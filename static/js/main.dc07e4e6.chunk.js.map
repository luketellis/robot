{"version":3,"sources":["components/Button/Button.jsx","components/GridCell/GridCell.jsx","domain/config/constants.js","components/Row/Row.jsx","components/Grid/Grid.jsx","components/TableData/TableData.jsx","components/Table/Table.jsx","components/TextInput/TextInput.jsx","domain/classes/Direction.js","domain/classes/Grid.js","domain/classes/Robot.js","components/RobotMovementBar/RobotMovementBar.jsx","domain/classes/Instruction.js","App.js","reportWebVitals.js","index.js"],"names":["Button","label","props","className","GridCell","direction","coordinateText","robot","setActive","onClick","id","toLowerCase","INFO_MESSAGES","ERROR_MESSAGES","Row","robots","rowNumber","Object","keys","Array","from","map","_","index","row","column","find","coordinate","x","y","Grid","rowsArray","i","NUM_ROWS","push","TableData","headerRowType","data","Table","tableData","tableHeadings","headerRowElements","tableHeading","dataRowElements","tableDataItem","JSON","stringify","active","TextInput","DirectionEnum","freeze","NORTH","EAST","SOUTH","WEST","isValidCoordinate","isNaN","NUM_COLUMNS","isGridCellFull","isArray","Error","matchingRobots","filter","Number","length","Robot","this","RobotMovementBar","activeRobot","displayToast","updateActiveRobot","robotArray","potentialRobotPosition","potentialPosition","calculateRobotForwardPosition","e","message","turnLeft","turnRight","getCoordinateAndDirection","place","placeArray","split","parseInt","toUpperCase","isValidPlaceCommand","potentialCoordinate","App","useState","setRobots","instruction","setInstruction","setActiveRobot","property","value","oldRobotArray","matchingRobotArray","nonMatchingRobotArray","forEach","matchingRobot","robotArrayWithUpdatedValues","sort","a","b","icon","toast","error","toastOptions","duration","placeholder","onChange","target","currentRobotNumber","isMaxRobotsExceeded","instructionArray","isValidInstruction","potentialRobot","createRobotFromString","prevState","disabled","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.dc07e4e6.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Button.css';\r\n\r\nexport const Button = ({ label = 'I am a button', ...props }) => {\r\n\treturn (\r\n\t\t<button className=\"button\" {...props}>\r\n\t\t\t{label}\r\n\t\t</button>\r\n\t);\r\n};\r\n","import React from 'react';\r\nimport './GridCell.css';\r\nimport { FaRobot } from 'react-icons/fa';\r\n\r\nexport const GridCell = ({ coordinateText, robot, setActive }) => {\r\n\tconst turnDirectionIntoLowerCase = (direction) => {\r\n\t\treturn direction.toLowerCase();\r\n\t};\r\n\r\n\treturn (\r\n\t\t<span className=\"gridcell\">\r\n\t\t\t{coordinateText}\r\n\t\t\t{robot && (\r\n\t\t\t\t<FaRobot\r\n\t\t\t\t\tonClick={() => setActive(robot.id, 'active', true)}\r\n\t\t\t\t\tclassName={`${turnDirectionIntoLowerCase(\r\n\t\t\t\t\t\trobot.direction\r\n\t\t\t\t\t)} robot robot${robot.id}`}\r\n\t\t\t\t/>\r\n\t\t\t)}\r\n\t\t</span>\r\n\t);\r\n};\r\n","export const MAX_ROBOTS = 5;\r\nexport const NUM_ROWS = 5;\r\nexport const NUM_COLUMNS = 5;\r\n\r\nexport const INFO_MESSAGES = {\r\n\tACTIVE_ROBOT_CHANGED: 'The active robot is now robot ',\r\n};\r\n\r\nexport const ERROR_MESSAGES = {\r\n\tGRID_CELL_OCCUPIED: 'The proposed grid cell is already occupied',\r\n\tINCORRECT_ARGUMENT: 'The argument passed in appears to be incorrect',\r\n\tINVALID_DIRECTION:\r\n\t\t'DIRECTIONS can only be \"NORTH\", \"SOUTH\", \"EAST\" or \"WEST\"',\r\n\tINVALID_INSTRUCTION:\r\n\t\t'\"PLACE\", \"MOVE\", \"LEFT\", \"RIGHT\", \"REPORT\" are the only valid commands',\r\n\tINVALID_PLACE_COMMAND:\r\n\t\t'PLACE commands should be in the following format \"PLACE 1,2,NORTH\"',\r\n\tMAX_ROBOTS_EXCEEDED: 'You cannot create any more robots',\r\n\tNO_ACTIVE_ROBOT: 'There is no active robot',\r\n\tROBOT_MISSING_DIRECTION: 'Active robot is missing a direction',\r\n\tOUTSIDE_OF_GRID:\r\n\t\t'Instruction would result in the robot being outside of the grid',\r\n};\r\n","import React from 'react';\r\nimport './Row.css';\r\nimport { GridCell } from '../GridCell/GridCell';\r\nimport { NUM_COLUMNS } from '../../domain/config/constants';\r\n\r\nexport const Row = ({ robots = [], rowNumber, setActive }) => {\r\n\tconst doesGridCellAlreadyHaveRobot = (row, column) => {\r\n\t\treturn robots.find((robot) => {\r\n\t\t\treturn robot.coordinate.x === row && robot.coordinate.y === column;\r\n\t\t});\r\n\t};\r\n\r\n\treturn (\r\n\t\t<div className=\"row\">\r\n\t\t\t{Object.keys(Array.from(Array(NUM_COLUMNS))).map((_, index) => {\r\n\t\t\t\treturn (\r\n\t\t\t\t\t<GridCell\r\n\t\t\t\t\t\tkey={`${index}, ${rowNumber}`}\r\n\t\t\t\t\t\tcoordinateText={`${index}, ${rowNumber}`}\r\n\t\t\t\t\t\trobot={doesGridCellAlreadyHaveRobot(index, rowNumber)}\r\n\t\t\t\t\t\tsetActive={setActive}\r\n\t\t\t\t\t/>\r\n\t\t\t\t);\r\n\t\t\t})}\r\n\t\t</div>\r\n\t);\r\n};\r\n","import React from 'react';\r\nimport { Row } from '../Row/Row';\r\nimport { NUM_ROWS } from '../../domain/config/constants';\r\n\r\nexport const Grid = ({ robots, setActive }) => {\r\n\tvar rowsArray = [];\r\n\tfor (var i = NUM_ROWS - 1; i > -1; i--) {\r\n\t\trowsArray.push(\r\n\t\t\t<Row key={i} rowNumber={i} robots={robots} setActive={setActive} />\r\n\t\t);\r\n\t}\r\n\r\n\treturn <div className=\"grid\">{rowsArray}</div>;\r\n};\r\n","import React from 'react';\r\n\r\nexport const TableData = ({ headerRowType = 'false', data }) => {\r\n\treturn (\r\n\t\t<>\r\n\t\t\t{headerRowType ? (\r\n\t\t\t\t<th className=\"tableHeader\">{data}</th>\r\n\t\t\t) : (\r\n\t\t\t\t<td className=\"tableData\">{data}</td>\r\n\t\t\t)}\r\n\t\t</>\r\n\t);\r\n};\r\n","import React from 'react';\r\nimport './Table.css';\r\nimport { TableData } from '../TableData/TableData';\r\nimport { TiTick } from 'react-icons/ti';\r\nimport { FiSquare } from 'react-icons/fi';\r\n\r\nexport const Table = ({ tableData = [], tableHeadings = [], setActive }) => {\r\n\tconst headerRowElements = tableHeadings.map((tableHeading, index) => (\r\n\t\t<TableData key={index} data={tableHeading} headerRowType={true}></TableData>\r\n\t));\r\n\r\n\tconst dataRowElements = tableData.map((tableDataItem, index) => (\r\n\t\t<tr key={index} className={`robot${tableDataItem.id}`}>\r\n\t\t\t<TableData\r\n\t\t\t\tkey={`${tableDataItem.id}-id`}\r\n\t\t\t\tdata={tableDataItem.id}\r\n\t\t\t\theaderRowType={false}\r\n\t\t\t></TableData>\r\n\t\t\t<TableData\r\n\t\t\t\tkey={`${tableDataItem.id}-coordinate`}\r\n\t\t\t\tdata={JSON.stringify(tableDataItem.coordinate)}\r\n\t\t\t\theaderRowType={false}\r\n\t\t\t></TableData>\r\n\t\t\t<TableData\r\n\t\t\t\tkey={`${tableDataItem.id}-direction`}\r\n\t\t\t\tdata={tableDataItem.direction}\r\n\t\t\t\theaderRowType={false}\r\n\t\t\t></TableData>\r\n\t\t\t<TableData\r\n\t\t\t\tkey={`${tableDataItem.id}-active`}\r\n\t\t\t\tdata={\r\n\t\t\t\t\ttableDataItem.active ? (\r\n\t\t\t\t\t\t<TiTick />\r\n\t\t\t\t\t) : (\r\n\t\t\t\t\t\t<FiSquare\r\n\t\t\t\t\t\t\tonClick={() => setActive(tableDataItem.id, 'active', true)}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t)\r\n\t\t\t\t}\r\n\t\t\t\theaderRowType={false}\r\n\t\t\t></TableData>\r\n\t\t</tr>\r\n\t));\r\n\r\n\treturn (\r\n\t\t<table className=\"table\">\r\n\t\t\t<thead>\r\n\t\t\t\t<tr>{headerRowElements}</tr>\r\n\t\t\t</thead>\r\n\r\n\t\t\t<tbody className=\"table\">{dataRowElements}</tbody>\r\n\t\t</table>\r\n\t);\r\n};\r\n","import React from 'react';\r\n\r\nexport const TextInput = ({ ...props }) => {\r\n\treturn (\r\n\t\t<span>\r\n\t\t\t<input {...props} />\r\n\t\t</span>\r\n\t);\r\n};\r\n\r\nexport default TextInput;\r\n","export const DirectionEnum = Object.freeze({\r\n\tNORTH: 'NORTH',\r\n\tEAST: 'EAST',\r\n\tSOUTH: 'SOUTH',\r\n\tWEST: 'WEST',\r\n});\r\n\r\nexport const turnLeft = (robot) => {\r\n\tif (!robot) {\r\n\t\tthrow new Error('Current robot is not defined');\r\n\t}\r\n\r\n\tswitch (robot.direction) {\r\n\t\tcase DirectionEnum.NORTH:\r\n\t\t\trobot.direction = DirectionEnum.WEST;\r\n\t\t\tbreak;\r\n\t\tcase DirectionEnum.EAST:\r\n\t\t\trobot.direction = DirectionEnum.NORTH;\r\n\t\t\tbreak;\r\n\t\tcase DirectionEnum.SOUTH:\r\n\t\t\trobot.direction = DirectionEnum.EAST;\r\n\t\t\tbreak;\r\n\r\n\t\tcase DirectionEnum.WEST:\r\n\t\t\trobot.direction = DirectionEnum.SOUTH;\r\n\t\t\tbreak;\r\n\r\n\t\tdefault:\r\n\t\t\tthrow new Error('Active robot direction is not defined');\r\n\t}\r\n};\r\n\r\nexport const turnRight = (robot) => {\r\n\tif (!robot) {\r\n\t\tthrow new Error('Current robot is not defined');\r\n\t}\r\n\r\n\tswitch (robot.direction) {\r\n\t\tcase DirectionEnum.NORTH:\r\n\t\t\trobot.direction = DirectionEnum.EAST;\r\n\t\t\tbreak;\r\n\t\tcase DirectionEnum.EAST:\r\n\t\t\trobot.direction = DirectionEnum.SOUTH;\r\n\t\t\tbreak;\r\n\t\tcase DirectionEnum.SOUTH:\r\n\t\t\trobot.direction = DirectionEnum.WEST;\r\n\t\t\tbreak;\r\n\t\tcase DirectionEnum.WEST:\r\n\t\t\trobot.direction = DirectionEnum.NORTH;\r\n\t\t\tbreak;\r\n\t\tdefault:\r\n\t\t\tthrow new Error('Current direction is not defined');\r\n\t}\r\n};\r\n","import {\r\n\tERROR_MESSAGES,\r\n\tMAX_ROBOTS,\r\n\tNUM_ROWS,\r\n\tNUM_COLUMNS,\r\n} from '../config/constants';\r\n\r\nexport const isValidCoordinate = ({ x, y }) => {\r\n\tif (isNaN(x) || isNaN(y)) {\r\n\t\treturn false;\r\n\t}\r\n\r\n\tif (x < 0 || y < 0) {\r\n\t\treturn false;\r\n\t}\r\n\r\n\tif (x > NUM_COLUMNS - 1 || y > NUM_ROWS - 1) {\r\n\t\treturn false;\r\n\t}\r\n\treturn true;\r\n};\r\n\r\nexport const isMaxRobotsExceeded = (\r\n\tcurrentRobotNumber,\r\n\tmaxRobots = MAX_ROBOTS\r\n) => {\r\n\tif (currentRobotNumber >= maxRobots) {\r\n\t\tthrow new Error(ERROR_MESSAGES.MAX_ROBOTS_EXCEEDED);\r\n\t}\r\n\r\n\treturn false;\r\n};\r\n\r\nexport const isGridCellFull = (robots = [], { x, y }) => {\r\n\tif (!Array.isArray(robots)) {\r\n\t\tthrow new Error('Not an array');\r\n\t}\r\n\r\n\tconst matchingRobots = robots.filter((robot) => {\r\n\t\treturn robot.coordinate.x === Number(x) && robot.coordinate.y === Number(y);\r\n\t});\r\n\r\n\treturn matchingRobots.length > 0;\r\n};\r\n","import { DirectionEnum } from './Direction';\r\nimport { isValidCoordinate } from './Grid';\r\nimport { ERROR_MESSAGES } from '../config/constants';\r\n\r\nexport function Robot(id, coordinate, direction, active) {\r\n\tthis.id = id;\r\n\tthis.coordinate = coordinate;\r\n\tthis.direction = direction;\r\n\tthis.active = active;\r\n}\r\n\r\nexport const calculateRobotForwardPosition = (robot) => {\r\n\tif (!robot) {\r\n\t\tthrow new Error(ERROR_MESSAGES.NO_ACTIVE_ROBOT);\r\n\t}\r\n\tif (!robot.direction) {\r\n\t\tthrow new Error(ERROR_MESSAGES.ROBOT_MISSING_DIRECTION);\r\n\t}\r\n\r\n\tlet potentialPosition = { ...robot.coordinate };\r\n\r\n\tswitch (robot.direction) {\r\n\t\tcase DirectionEnum.NORTH:\r\n\t\t\tpotentialPosition.y++;\r\n\t\t\tbreak;\r\n\t\tcase DirectionEnum.EAST:\r\n\t\t\tpotentialPosition.x++;\r\n\t\t\tbreak;\r\n\t\tcase DirectionEnum.SOUTH:\r\n\t\t\tpotentialPosition.y--;\r\n\t\t\tbreak;\r\n\t\tcase DirectionEnum.WEST:\r\n\t\t\tpotentialPosition.x--;\r\n\t\t\tbreak;\r\n\t\tdefault:\r\n\t\t\tthrow new Error(ERROR_MESSAGES.INVALID_DIRECTION);\r\n\t}\r\n\r\n\tif (!isValidCoordinate(potentialPosition)) {\r\n\t\tthrow new Error(ERROR_MESSAGES.OUTSIDE_OF_GRID);\r\n\t}\r\n\r\n\treturn potentialPosition;\r\n};\r\n","import React from 'react';\r\nimport { Button } from '../Button/Button';\r\nimport { calculateRobotForwardPosition } from '../../domain/classes/Robot';\r\nimport { turnLeft, turnRight } from '../../domain/classes/Direction';\r\nimport { ERROR_MESSAGES } from '../../domain/config/constants';\r\nimport { isGridCellFull } from '../../domain/classes/Grid';\r\n\r\nexport const RobotMovementBar = ({\r\n\tactiveRobot,\r\n\tdisplayToast,\r\n\tupdateActiveRobot,\r\n\trobotArray,\r\n}) => {\r\n\tif (!activeRobot) {\r\n\t\treturn null;\r\n\t}\r\n\r\n\tconst moveRobot = () => {\r\n\t\ttry {\r\n\t\t\tconst potentialRobotPosition = calculateRobotForwardPosition(activeRobot);\r\n\r\n\t\t\tif (isGridCellFull(robotArray, potentialRobotPosition)) {\r\n\t\t\t\tthrow new Error(ERROR_MESSAGES.GRID_CELL_OCCUPIED);\r\n\t\t\t}\r\n\r\n\t\t\tactiveRobot.coordinate = { ...potentialRobotPosition };\r\n\r\n\t\t\tupdateActiveRobot(activeRobot.id, 'coordinate', activeRobot.coordinate);\r\n\t\t} catch (e) {\r\n\t\t\tdisplayToast(e.message);\r\n\t\t}\r\n\t};\r\n\r\n\tconst turnRobotLeft = () => {\r\n\t\ttry {\r\n\t\t\tturnLeft(activeRobot);\r\n\t\t\tupdateActiveRobot(activeRobot.id, 'direction', activeRobot.direction);\r\n\t\t} catch (e) {\r\n\t\t\tdisplayToast(e.message);\r\n\t\t}\r\n\t};\r\n\r\n\tconst turnRobotRight = () => {\r\n\t\ttry {\r\n\t\t\tturnRight(activeRobot);\r\n\t\t\tupdateActiveRobot(activeRobot.id, 'direction', activeRobot.direction);\r\n\t\t} catch (e) {\r\n\t\t\tdisplayToast(e.message);\r\n\t\t}\r\n\t};\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<h2>Active Robot Commands</h2>\r\n\t\t\t<Button label=\"Move Robot Forward\" onClick={moveRobot} />\r\n\t\t\t<Button label=\"Turn Robot Left\" onClick={turnRobotLeft} />\r\n\t\t\t<Button label=\"Turn Robot Right\" onClick={turnRobotRight} />\r\n\t\t</div>\r\n\t);\r\n};\r\n","import { DirectionEnum } from './Direction';\r\nimport { ERROR_MESSAGES } from '../config/constants';\r\nimport { Robot } from './Robot';\r\nimport { isGridCellFull, isValidCoordinate } from './Grid';\r\n\r\n//Validates commands to be of format, \"PLACE 1,2,NORTH\"\r\nexport const isValidInstruction = (instruction, robotArray) => {\r\n\tif (!instruction || typeof instruction !== 'string') {\r\n\t\tthrow new Error(ERROR_MESSAGES.INCORRECT_ARGUMENT);\r\n\t}\r\n\r\n\tconst instructionArray = instruction.split(' ');\r\n\r\n\tif (instructionArray.length > 2) {\r\n\t\tthrow new Error(ERROR_MESSAGES.INVALID_INSTRUCTION);\r\n\t}\r\n\r\n\tif (\r\n\t\tinstructionArray.length !== 2 ||\r\n\t\tinstructionArray[0].toUpperCase() !== 'PLACE'\r\n\t) {\r\n\t\tthrow new Error(ERROR_MESSAGES.INVALID_PLACE_COMMAND);\r\n\t}\r\n\r\n\tif (!isValidPlaceCommand(instructionArray[1], robotArray)) {\r\n\t\treturn false;\r\n\t}\r\n\r\n\treturn true;\r\n};\r\n\r\nexport const getCoordinateAndDirection = (place) => {\r\n\tconst placeArray = place.split(',');\r\n\r\n\tif (placeArray.length !== 3) {\r\n\t\tthrow new Error(ERROR_MESSAGES.INVALID_PLACE_COMMAND);\r\n\t}\r\n\r\n\tconst x = parseInt(placeArray[0]);\r\n\tconst y = parseInt(placeArray[1]);\r\n\tconst direction = placeArray[2].toUpperCase();\r\n\r\n\tif (isNaN(x) || isNaN(y)) {\r\n\t\tthrow new Error(ERROR_MESSAGES.INVALID_PLACE_COMMAND);\r\n\t}\r\n\r\n\tif (!(direction in DirectionEnum)) {\r\n\t\tthrow new Error(ERROR_MESSAGES.INVALID_PLACE_COMMAND);\r\n\t}\r\n\r\n\tconst coord = { x, y };\r\n\treturn [coord, direction];\r\n};\r\n\r\nexport const isValidPlaceCommand = (place, robotArray) => {\r\n\tconst [potentialCoordinate] = getCoordinateAndDirection(place);\r\n\tif (!isValidCoordinate(potentialCoordinate)) {\r\n\t\tthrow new Error(ERROR_MESSAGES.OUTSIDE_OF_GRID);\r\n\t}\r\n\r\n\tif (isGridCellFull(robotArray, potentialCoordinate)) {\r\n\t\tthrow new Error(ERROR_MESSAGES.GRID_CELL_OCCUPIED);\r\n\t}\r\n\r\n\treturn true;\r\n};\r\n\r\nexport const createRobotFromString = ({ instruction, id, active }) => {\r\n\tconst [, place] = instruction.split(' ');\r\n\tconst [coordinate, direction] = getCoordinateAndDirection(place);\r\n\r\n\treturn new Robot(id, coordinate, direction, active);\r\n};\r\n","import './App.css';\r\nimport React, { useState } from 'react';\r\nimport { Button } from './components/Button/Button';\r\nimport { Grid } from './components/Grid/Grid';\r\nimport { Table } from './components/Table/Table';\r\nimport { TextInput } from './components/TextInput/TextInput';\r\nimport { RobotMovementBar } from './components/RobotMovementBar/RobotMovementBar';\r\nimport {\r\n\tisValidInstruction,\r\n\tcreateRobotFromString,\r\n} from './domain/classes/Instruction';\r\nimport { isMaxRobotsExceeded } from './domain/classes/Grid';\r\nimport { toast, Toaster } from 'react-hot-toast';\r\nimport { INFO_MESSAGES } from './domain/config/constants';\r\n\r\nfunction App() {\r\n\tconst [robots, setRobots] = useState([]);\r\n\tconst [instruction, setInstruction] = useState('');\r\n\tconst [activeRobot, setActiveRobot] = useState('');\r\n\r\n\tconst addRobot = () => {\r\n\t\ttry {\r\n\t\t\tisMaxRobotsExceeded(robots.length);\r\n\t\t\tisValidInstruction(instruction, robots);\r\n\t\t\tconst potentialRobot = createRobotFromString({\r\n\t\t\t\tinstruction,\r\n\t\t\t\tid: robots.length + 1,\r\n\t\t\t\tactive: !activeRobot,\r\n\t\t\t});\r\n\t\t\tsetRobots((prevState) => [...prevState, potentialRobot]);\r\n\t\t\tsetInstruction('');\r\n\t\t\t!activeRobot && setActiveRobot(potentialRobot);\r\n\t\t} catch (e) {\r\n\t\t\tdisplayToast(e.message);\r\n\t\t\treturn;\r\n\t\t}\r\n\t};\r\n\r\n\tconst updateActiveRobot = (id, property, value) => {\r\n\t\ttry {\r\n\t\t\tconst oldRobotArray = [...robots];\r\n\r\n\t\t\tconst matchingRobotArray = oldRobotArray.filter((robot) => {\r\n\t\t\t\treturn robot.id === id;\r\n\t\t\t});\r\n\r\n\t\t\tconst nonMatchingRobotArray = oldRobotArray.filter((robot) => {\r\n\t\t\t\treturn robot.id !== id;\r\n\t\t\t});\r\n\r\n\t\t\tif (property === 'active') {\r\n\t\t\t\tnonMatchingRobotArray.forEach((robot) => {\r\n\t\t\t\t\trobot.active = false;\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\tconst matchingRobot = { ...matchingRobotArray[0] };\r\n\t\t\tmatchingRobot[property] = value;\r\n\r\n\t\t\tconst robotArrayWithUpdatedValues = [\r\n\t\t\t\t...nonMatchingRobotArray,\r\n\t\t\t\tmatchingRobot,\r\n\t\t\t];\r\n\r\n\t\t\trobotArrayWithUpdatedValues.sort((a, b) => a.id - b.id);\r\n\r\n\t\t\tsetRobots(robotArrayWithUpdatedValues);\r\n\r\n\t\t\tif (property === 'active' && activeRobot.id !== id) {\r\n\t\t\t\tdisplayToast(INFO_MESSAGES.ACTIVE_ROBOT_CHANGED + id, '✔️');\r\n\t\t\t}\r\n\t\t\tsetActiveRobot(matchingRobot);\r\n\t\t} catch (e) {\r\n\t\t\tdisplayToast(e.message);\r\n\t\t\treturn;\r\n\t\t}\r\n\t};\r\n\r\n\tconst handleInstructionTerm = (e) => {\r\n\t\tsetInstruction(e.target.value);\r\n\t};\r\n\r\n\tconst displayToast = (message, icon = '⚠️') => {\r\n\t\ttoast.error(message, {\r\n\t\t\ticon: icon,\r\n\t\t});\r\n\t};\r\n\r\n\treturn (\r\n\t\t<div className=\"app\">\r\n\t\t\t<div>\r\n\t\t\t\t<Toaster\r\n\t\t\t\t\ttoastOptions={{\r\n\t\t\t\t\t\tduration: 2000,\r\n\t\t\t\t\t}}\r\n\t\t\t\t/>\r\n\t\t\t</div>\r\n\t\t\t<h1>Robot</h1>\r\n\r\n\t\t\t<Table\r\n\t\t\t\ttableHeadings={['ID', 'Coordinate', 'Direction', 'Active']}\r\n\t\t\t\ttableData={robots}\r\n\t\t\t\tsetActive={updateActiveRobot}\r\n\t\t\t/>\r\n\r\n\t\t\t<TextInput\r\n\t\t\t\tplaceholder=\"Enter Starting Instructions\"\r\n\t\t\t\tonChange={handleInstructionTerm}\r\n\t\t\t\tvalue={instruction}\r\n\t\t\t/>\r\n\t\t\t<Button\r\n\t\t\t\tlabel=\"Create New Robot\"\r\n\t\t\t\tonClick={addRobot}\r\n\t\t\t\tdisabled={!instruction}\r\n\t\t\t/>\r\n\r\n\t\t\t<RobotMovementBar\r\n\t\t\t\tactiveRobot={activeRobot}\r\n\t\t\t\tdisplayToast={displayToast}\r\n\t\t\t\tupdateActiveRobot={updateActiveRobot}\r\n\t\t\t\trobotArray={robots}\r\n\t\t\t/>\r\n\t\t\t<Grid robots={robots} setActive={updateActiveRobot} />\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}